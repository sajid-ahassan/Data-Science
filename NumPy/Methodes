import numpy as np

# Creating a 1D NumPy array
arr1 = np.array([1, 2, 3, 4, 5])
print(arr1)

# Creating a 2D NumPy array
arr2 = np.array([[1, 2, 3], [4, 5, 6]])
print(arr2)

# Checking type and shape
print("Type:", type(arr1))
print("Shape:", arr2.shape)



# Python list (loop-based)
list_squares = [x ** 2 for x in list1]
# NumPy (vectorized)
numpy_squares = arr1 ** 2


arr1 = np.array([1, 2, 3, 4, 5]) # 1D array
arr2 = np.array([[1, 2, 3], [4, 5, 6]]) # 2D array
np.zeros((3, 3)) # 3x3 array of zeros
np.ones((2, 4)) # 2x4 array of ones
np.full((2, 2), 7) # 2x2 array filled with 7
np.eye(4) # 4x4 identity matrix
np.arange(1, 10, 2) # [1, 3, 5, 7, 9] (like range)
np.linspace(0, 1, 5) # [0. 0.25 0.5 0.75 1.] (evenly spaced)


arr = np.array([[10, 20, 30], [40, 50, 60]])
print("Shape:", arr.shape) # (2, 3) → 2 rows, 3 columns
print("Size:", arr.size) # 6 → total elements
print("Dimensions:", arr.ndim) # 2 → 2D array
print("Data type:", arr.dtype) # int64 (or int32 on Windows)

arr = np.array([1, 2, 3], dtype=np.float32) # Explicit type
print(arr.dtype) # float32
arr_int = arr.astype(np.int32) # Convert float to int
print(arr_int) # [1 2 3]


arr = np.array([[1, 2, 3], [4, 5, 6]])
print(arr.shape) # (2, 3)
reshaped = arr.reshape((3, 2)) # Change shape
print(reshaped)
# [[1 2]
# [3 4]
# [5 6]]
flattened = arr.flatten() # Convert 2D → 1D
print(flattened) # [1 2 3 4 5 6]


Fancy Indexing (Select Multiple Elements)
arr = np.array([10, 20, 30, 40, 50])
idx = [0, 2, 4] # Indices to select
print(arr[idx]) # [10 30 50]


Boolean Masking (Filter Data)
arr = np.array([10, 20, 30, 40, 50])
mask = arr > 25 # Condition: values greater than 25
print(arr[mask]) # [30 40 50]
